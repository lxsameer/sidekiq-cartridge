#!/bin/bash

function sidekiq_is_runnning() {
  sidekiq_pid=$(cat $SIDEKIQ_PID_FILE 2>/dev/null)
  [ -z "${sidekiq_pid}" ] && return 1
  if ps -p $sidekiq_pid 2>&1 >/dev/null; then
    return 0
  else
    return 1
  fi
}

function gem_path() {
  ruby_context 'ruby -r rubygems -e "print Gem.path.join(\":\")"'
}

function ruby_context_with_gempath() {
  ruby_context "GEM_PATH=${OPENSHIFT_REPO_DIR}vendor/ruby:$(gem_path) REDIS_URL=${REDIS_URL} $@"
}

function have_redis() {
  [ -n "${OPENSHIFT_REDIS_DIR}" ]
}

function use_rails() {
  [ -d "${OPENSHIFT_REPO_DIR}config/environments" -a "$(ls -A ${OPENSHIFT_REPO_DIR}config/environments 2>/dev/null)" ]
}

function use_workers() {
  [ -f "${OPENSHIFT_REPO_DIR}workers.rb" ]
}

function sidekiq_monitoring() {
  local action=$1

  monitor_pid_file="${OPENSHIFT_SIDEKIQ_DIR}run/monitor.pid"
  monitor_bind="--host ${OPENSHIFT_SIDEKIQ_MONITOR_IP} --port ${OPENSHIFT_SIDEKIQ_MONITOR_PORT}"

  pushd ${OPENSHIFT_SIDEKIQ_DIR}lib/monitoring >/dev/null

  if [ "${action}" == "start" ]; then
    ruby_context_with_gempath "rackup ${monitor_bind} -E production -D -P ${monitor_pid_file} 2>&1 >/dev/null"
  fi

  if [ "${action}" == "stop" ]; then
    monitor_pid=$(cat $monitor_pid_file 2>/dev/null)
    [ ! -z "${monitor_pid}" ] && kill -15 "$monitor_pid"
  fi

  popd >/dev/null
}
